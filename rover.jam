
GOALS:
  ACHIEVE TraverseArea;
FACTS:
  FACT MAX_XY 7 6; // AREA BOUNDARIES

  FACT ROCK 2 6 "False";
  FACT ROCK 3 1 "False";
  FACT ROCK 6 1 "False";
  FACT ROCK 5 3 "False";
  FACT ROCK 7 5 "True";
  FACT ROCK 3 2 "True";
  FACT ROCK 2 2 "True";
  FACT ROCK 3 3 "True";

  FACT EXPLORATORY_MODE "ON";
  FACT MOVING_HOME_MODE "OFF";
  FACT FETCH_MODE "OFF";

  FACT EXPLOR_RES_POS 0 0; // WHERE TO RESUME EXPLORUNG
  FACT CURR_POS 0 0;
  FACT EXPL_VELOCITY 1; // WHICH Y DIRECTION TO MOVE TO

  // --- STATS ----
  FACT TOTAL_MOVES 0;
  FACT WATER_FOUND "";
  FACT EMPTY_ROCK_FOUND "";

// Find water source
Plan: {
  NAME:
  	"Find Water Source"
  GOAL:
  	ACHIEVE TraverseArea;
  BODY:
      OR {
        TEST(FACT MOVING_HOME_MODE "ON");
        PERFORM MovedTo 0 0 "in base\n";
        UPDATE (MOVING_HOME_MODE) (MOVING_HOME_MODE "OFF");
        RETRIEVEALL $knowns KNOWN_ROCK_LOC $x $y;
        NEXTFACT $knowns KNOWN_ROCK_LOC $x $y;
        // EXECUTION WILL GET HERE ONLY IF KNOWN ROCKS EXIST
        UPDATE (FETCH_MODE) (FETCH_MODE "ON"); // IF EXIST, FETCH THEM
        FAIL;
      }{
        TEST(FACT FETCH_MODE "ON");
        PERFORM FetchKnownRockRoutine;
        FAIL;
      }{
        // IF FETCH AND RETURN HOME MODES ARE OFF, THEN EXPLORE
        RETRIEVE EXPLOR_RES_POS $sX $sY;
        // THE GOAL WILL BE ACHIEVED IF EITHER BRANCH HOLDS TRUE
        OR {
          // -> IF POSITION WHERE TO RESUME EXPLORING MATCHES BOUDARY POSITION
          RETRIEVE MAX_XY $MAX_X $MAX_Y;
          OR {
            TEST (== (% $MAX_X 2) 0); // ODD X AXIS NUMBER
            TEST (&& (== $sX $MAX_X) (== $sY $MAX_Y));
          }{
            TEST (!= (% $MAX_X 2) 0); // EVEN X AXIS NUMBER
            TEST (&& (== $sX $MAX_X) (== $sY 0));
          };
        }{
          RETRIEVE CURR_POS $x $y;
          WHEN: TEST (|| (!= $x $sX) (!= $y $sY)){
            // RETURN TO POSITION WHERE EXPLORING WAS STOOPED
            PERFORM MovedTo $sX $sY "at the exploaration point\n";
          };
          UPDATE (EXPLORATORY_MODE) (EXPLORATORY_MODE "ON");
          ACHIEVE ExploratoryRoutine;
        };
      };
      PERFORM PrintStats;
}

// ExploratoryRoutine
Plan: {
  NAME:
  	"Exploartory Routine"
  GOAL:
  	ACHIEVE ExploratoryRoutine $x $y;
  CONTEXT:
    FACT EXPLORATORY_MODE "ON";
  BODY:
    RETRIEVE MAX_XY $MAX_X $MAX_Y;
    RETRIEVE EXPL_VELOCITY $velocity;
    RETRIEVE CURR_POS $x $y;
    WHILE: TEST (|| (!= $x $MAX_X) (!= $y $MAX_Y)){
      ASSIGN $y (+ $y $velocity);
      PERFORM MoveTo $x $y;
      PERFORM CheckAndStore $x $y;
      // WHEN FINAL POINT ON AN Y AXIS IS REACHED
      WHEN: TEST (&& (|| (== $y $MAX_Y) (== $y 0)) (< $x $MAX_X)) {
        ASSIGN $x (+ $x 1); // move to next x axis
        PERFORM MoveTo $x $y;
        PERFORM CheckAndStore $x $y; // see if a rock is here
        ASSIGN $velocity (* $velocity -1); // invert velocity
        UPDATE (EXPL_VELOCITY) (EXPL_VELOCITY $velocity);
      };
    };
  FAILURE:
    // WHEN ROCK IS FOUND AND EXPLORATORY_MODE IS TURNED OFF
    // NEED TO INVERT THE VELOCITY IF CURRENTLY ON X AXIS' FINAL POSITION
    WHEN: TEST (&& (== $y $MAX_Y) (== $velocity 1)){
      UPDATE (EXPL_VELOCITY) (EXPL_VELOCITY -1);
    };
    WHEN: TEST (&& (== $y 0) (== $velocity -1)){
      UPDATE (EXPL_VELOCITY) (EXPL_VELOCITY 1);
    };
}

// FetchKnownRockRoutine
Plan: {
  NAME:
  	"Fetch a known rock - routine"
  GOAL:
  	PERFORM FetchKnownRockRoutine;
  BODY:
    RETRIEVEALL $knowns KNOWN_ROCK_LOC $x $y;
    NEXTFACT $knowns KNOWN_ROCK_LOC $x $y;
    EXECUTE print "\nReturning to a known rock\n";
    PERFORM MovedTo $x $y "at a known rock location\n";
    RETRACT KNOWN_ROCK_LOC $x $y;
    PERFORM CheckAndStore $x $y;
    UPDATE (FETCH_MODE) (FETCH_MODE "OFF");
}

// MovedTo
Plan: {
  NAME:
  	"Moved to"
  GOAL:
  	PERFORM MovedTo $X $Y $destName;
  BODY:
    RETRIEVE CURR_POS $x $y;
    AND
    { // Approach destination on X axis
      ASSIGN $velocity 1;
      WHEN: TEST (< $X $x) {
        ASSIGN $velocity -1;
      };
      WHILE: TEST (!= $X $x){
        ASSIGN $x (+ $x $velocity);
        PERFORM MoveTo $x $y;
      };
    }{  // Approach destination on Y axis
      ASSIGN $velocity 1;
      WHEN: TEST (< $Y $y) {
        ASSIGN $velocity -1;
      };
      WHILE: TEST (!= $Y $y){
        ASSIGN $y (+ $y $velocity);
        PERFORM MoveTo $x $y;
      };
    };
  EFFECTS:
    EXECUTE print "\nArrived " $destName;
}

// GetHomeExploring
Plan: {
  NAME:
  	"Get Home Exploring"
  GOAL:
  	PERFORM GetHomeExploring $x $y;
  BODY:
    WHILE: TEST (> $y 0){
      ASSIGN $y (- $y 1); // intend to move down
      PERFORM MoveTo $x $y;
      PERFORM CheckAndRemember $x $y;
    };
    UPDATE (EXPLOR_RES_POS) (EXPLOR_RES_POS $x $y);
}

// CheckAndStore
Plan: {
  NAME:
  	"Check if a rock and store if watter is in it"
  GOAL:
  	PERFORM CheckAndStore $x $y;
  BODY:
    OR{
      TEST (FACT ROCK $x $y "True");
      RETRIEVE WATER_FOUND $wf;
      UPDATE (WATER_FOUND) (WATER_FOUND (+ $wf (+ "\nRock with water at: " (+ (+ $x " | ") $y))));
      EXECUTE print "\nFound rock with water - will take it to base\n";
      RETRACT ROCK $x $y "True"; // delete
      WHEN: TEST (&& (FACT EXPL_VELOCITY -1) (> $y 0)){ // When was exploring downwards
        PERFORM GetHomeExploring $x $y;
      };
      UPDATE (MOVING_HOME_MODE) (MOVING_HOME_MODE "ON");
      UPDATE (EXPLOR_RES_POS) (EXPLOR_RES_POS $x $y);
      UPDATE (EXPLORATORY_MODE) (EXPLORATORY_MODE "OFF");
    }{
      TEST (FACT ROCK $x $y "False");
      EXECUTE print "\nFound rock with no water - discarding it\n";
      RETRIEVE EMPTY_ROCK_FOUND $str;
      UPDATE (EMPTY_ROCK_FOUND) (EMPTY_ROCK_FOUND (+ $str (+ "\nRock with no water at: " (+ (+ $x " | ") $y))));
      RETRACT ROCK $x $y "False"; // delete
    }{
      SUCCEED;
    };
}

// CheckAndRemember
Plan: {
  NAME:
  	"Check if a rock and remember its position"
  GOAL:
  	PERFORM CheckAndRemember $x $y;
  BODY:
    WHEN: TEST (FACT ROCK $x $y){
      EXECUTE print "\nFound another rock, saving its location\n";
      ASSERT KNOWN_ROCK_LOC $x $y;
    };
}
// PrintStats
Plan: {
  NAME:
  	"Print stats"
  GOAL:
  	PERFORM PrintStats ;
  BODY:
    RETRIEVE WATER_FOUND $water ;
    RETRIEVE EMPTY_ROCK_FOUND $noWater;
    RETRIEVE TOTAL_MOVES $n;
    EXECUTE print "\n\nMISSION COMPLETE!";
    EXECUTE print "\nTotal moves were made: " $n "\n";
    EXECUTE print $noWater "\n";
    EXECUTE print $water "\n";

}
// MoveTo X,Y
Plan: {
  NAME:
  	"Move To"
  GOAL:
  	PERFORM MoveTo $x $y;
  BODY:
    RETRIEVE TOTAL_MOVES $n;
    UPDATE (TOTAL_MOVES) (TOTAL_MOVES (+ $n 1));
    UPDATE (CURR_POS) (CURR_POS $x $y);
    EXECUTE print "\n-> X: " $x " Y: " $y " | ";
}
